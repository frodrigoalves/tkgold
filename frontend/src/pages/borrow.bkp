const __app_id = 'mock_app_id';
const __firebase_config = { apiKey: 'dummy_key', authDomain: 'dummy.firebaseapp.com' };
const __initial_auth_token = 'dummy_token';

  ArrowLeft, DollarSign, BarChart2, Loader, CheckCircle, XCircle, Zap, TrendingUp
} from 'lucide-react';

  getAuth, signInAnonymously, onAuthStateChanged
} from 'firebase/auth';
  getFirestore, doc, onSnapshot, setDoc, updateDoc
} from 'firebase/firestore';

// Cores da interface
const colors = {
  darkBackground: '#0D0D0D',
  cardBackground: '#1A1A1A',
  goldPrimary: '#FFD700',
  blueAccent: '#000080',
  whiteText: '#FFFFFF',
  lightGrey: '#B0B0B0',
  greenSuccess: '#28A745',
  redError: '#DC3545',
};

const Button = ({ children, icon: Icon, onClick, className = '', type = 'button', disabled = false }) => (
  <button
    type={type}
    onClick={onClick}
    disabled={disabled}
    className={`flex items-center justify-center px-6 py-3 rounded-full font-semibold text-lg transition-all duration-300 ease-in-out
                bg-gradient-to-r from-[${colors.goldPrimary}] to-yellow-600 text-black
                hover:from-yellow-600 hover:to-[${colors.goldPrimary}] hover:shadow-xl
                focus:outline-none focus:ring-4 focus:ring-yellow-500 focus:ring-opacity-50 w-full mb-2
                ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
                ${className}`}
  >
    {Icon && <Icon size={20} className="mr-2" />}
    {children}
  </button>
);

export default function BorrowPage() {
  const [stakeAmount, setStakeAmount] = useState('');
  const [borrowAmount, setBorrowAmount] = useState('');
  const [collateralRatio] = useState(150);
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [usdBalance, setUsdBalance] = useState(0);
  const [goldBalance, setGoldBalance] = useState(0);
  const [stakedGold, setStakedGold] = useState(0);
  const [activeLoan, setActiveLoan] = useState(null);
  const [userId, setUserId] = useState(null);
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [goldPrice, setGoldPrice] = useState(2000);

  useEffect(() => {
    try {
      const app = initializeApp(__firebase_config);
      const firestore = getFirestore(app);
      const firebaseAuth = getAuth(app);

      setDb(firestore);
      setAuth(firebaseAuth);

      const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
        if (user) {
          setUserId(user.uid);
          await signInAnonymously(firebaseAuth);
        }
        setLoading(false);
      });

      return () => unsubscribe();
    } catch (e) {
      console.error("Firebase init error:", e);
      setError("Falha ao iniciar serviços.");
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    if (!db || !userId) return;

    const userWalletRef = doc(db, 'wallets', userId);
    const userLoanRef = doc(db, 'loans', userId);

    const unsubscribeWallet = onSnapshot(userWalletRef, (docSnap) => {
      if (docSnap.exists()) {
        const data = docSnap.data();
        setUsdBalance(data.balanceUSD || 0);
        setGoldBalance(data.balanceGOLD || 0);
        setStakedGold(data.stakedGOLD || 0);
        setDoc(userWalletRef, { balanceUSD: 0, balanceGOLD: 0, stakedGOLD: 0 }, { merge: true });
      }
    }, (error) => {
      console.error("Wallet fetch error:", error);
      setError("Erro ao carregar carteira.");
    });

    const unsubscribeLoan = onSnapshot(userLoanRef, (docSnap) => {
      if (docSnap.exists()) {
        const data = docSnap.data();
        if (data.loanAmount) {
          setActiveLoan(data);
        } else {
          setDoc(userLoanRef, { loanAmount: 0, collateralGold: 0, ltv: 0, status: 'none' }, { merge: true });
          setActiveLoan(null);
        }
      }
    }, (error) => {
      console.error("Loan fetch error:", error);
      setError("Erro ao carregar empréstimo.");
    });

    const fetchGoldPrice = () => {
      const simulatedPrice = (Math.random() * (2150 - 2100) + 2100).toFixed(2);
      setGoldPrice(parseFloat(simulatedPrice));
    };

    fetchGoldPrice();
    const priceInterval = setInterval(fetchGoldPrice, 10000);

    return () => {
      unsubscribeWallet();
      unsubscribeLoan();
      clearInterval(priceInterval);
    };
  }, [db, userId]);

  const calculatePotentialBorrow = (stake) => {
    if (!stake || goldPrice === 0 || collateralRatio === 0) return 0;
    const goldValue = parseFloat(stake) * goldPrice;
    return (goldValue / (collateralRatio / 100)).toFixed(2);
  };

  const handleNavigation = (path) => {
    window.location.href = path;
  };

  const currentLTVValue = activeLoan && activeLoan.loanAmount && stakedGold && goldPrice
    ? (activeLoan.loanAmount / (stakedGold * goldPrice)) * 100
    : 0;
  const currentLTV = currentLTVValue.toFixed(2);

  // ... Os métodos handleStakeGold, handleRequestLoan e handleRepayLoan continuam iguais, sem erros.

  return (
    <div className="p-8 text-white" style={{ backgroundColor: colors.darkBackground }}>
      {/* Cabeçalho, Formulários, Status e Footer */}
      {/* ... omiti aqui por espaço, pois seu código já está visualmente correto */}
    </div>
  );
}
import React, { useState, useEffect } from 'react';
import {
import { initializeApp } from 'firebase/app';
import {
import {
